%{
#include <cstdio>
#include <iostream>
using namespace std;

#include "formula_input.hpp" 

// stuff from flex that bison needs to know about:
extern "C" int stddlex();

void yyerror(const char *s);

Formula_input *res_std = NULL;
%}

// Bison fundamentally works by asking flex to get the next token, which it
// returns as an object of type "yystype".  But tokens could be of any
// arbitrary data type!  So we deal with that in Bison by defining a C union
// holding each of the types of tokens that Flex could return, and have Bison
// use that union instead of "int" for the definition of "yystype":
%union {
    int ival;
    class Formula_input *f;
}

%start input

// define the "terminal symbol" token types I'm going to use (in CAPS
// by convention), and associate each with a field of the union:
%token TK_MINUS TK_AND TK_NEWLINE TK_OR TK_XOR TK_IMPLY TK_EQUIV TK_NEGATE TK_END
%token TK_LPAREN TK_RPAREN
%token <ival> TK_VAR
%type <f> formula_completed
%type <f> formula

%left TK_END
%left TK_NEWLINE
%left TK_EQUIV
%left TK_IMPLY
%left TK_XOR
%left TK_OR
%left TK_AND
%left TK_NEGATE
%left TK_MINUS

%%
// this is the actual grammar that bison will parse
input: formula_completed  { res_std = $1; }
	;

formula_completed:
	formula TK_END { $$ = $1; }
	;

formula:
      TK_VAR						{ $$ = new FVar_input($1); }
    | TK_MINUS TK_VAR				{ $$ = new FVar_input(-$2); }
    | TK_LPAREN formula TK_RPAREN	{ $$ = $2; }
    | formula TK_AND formula		{ $$ = new FOperation_input($1, $3, FOperation_input::AND); }
    | formula TK_NEWLINE formula	{ $$ = new FOperation_input($1, $3, FOperation_input::AND); }
    | formula TK_OR formula			{ $$ = new FOperation_input($1, $3, FOperation_input::OR); }
    | formula TK_XOR formula		{ $$ = new FOperation_input($1, $3, FOperation_input::XOR); }
    | formula TK_IMPLY formula		{ $$ = new FOperation_input($1, $3, FOperation_input::IMPLY); }
    | formula TK_EQUIV formula		{ $$ = new FOperation_input($1, $3, FOperation_input::EQUIV); }
    | TK_NEGATE formula				{ $$ = new FOperation_input($2, NULL, FOperation_input::NEGATE); }
    ;
%%
